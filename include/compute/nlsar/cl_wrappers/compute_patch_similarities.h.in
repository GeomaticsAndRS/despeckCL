#ifndef COMPUTE_PATCH_SIMILARITIES_H
#define COMPUTE_PATCH_SIMILARITIES_H

#include "clcfg.h"

namespace nlsar {
    class compute_patch_similarities : public kernel_env<compute_patch_similarities>
    {
        public:
            cl::Context context;
            const size_t block_size_x;
            const size_t block_size_y;
            const size_t steps_row;
            const size_t steps_col;

            compute_patch_similarities (cl::Context context,
                                        const size_t block_size_x,
                                        const size_t block_size_y,
                                        const int steps_row,
                                        const int steps_col);

            compute_patch_similarities (const compute_patch_similarities& other);

            static constexpr const char* kernel_source_row_pass =
    "@CMAKE_KERNEL_SOURCE_ROW_PASS@"
    ;

            static constexpr const char* kernel_source_col_pass =
    "@CMAKE_KERNEL_SOURCE_COL_PASS@"
    ;

            cl::Program program_row_pass;
            cl::Program program_col_pass;

            cl::Kernel  kernel_row_pass;
            cl::Kernel  kernel_col_pass;

            static constexpr const char* routine_name {"compute_patch_similarities"};

            std::string return_build_options(const int block_size_x,
                                             const int block_size_y,
                                             const int steps_row,
                                             const int steps_col);

            void run(cl::CommandQueue cmd_queue,
                     cl::Buffer pixel_similarities,
                     cl::Buffer patch_similarities,
                     const int height_sim,
                     const int width_sim,
                     const int search_winow_size,
                     const int patch_size,
                     const int patch_size_max);
    };
}

#endif
